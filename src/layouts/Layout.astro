---
export interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = "Webデザインと自動化の小さな実験場。英語＋日本語併記のポートフォリオ。", image = "/og-image.jpg" } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <title>{title}</title>
  </head>
  <body class="bg-gradient-to-br from-blue-50 to-violet-100 dark:from-gray-900 dark:to-violet-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <slot />
    
    <!-- Theme Toggle Script -->
    <script>
      // Initialize theme from localStorage or system preference
      function initTheme() {
        const theme = localStorage.getItem('theme') || 
          (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.setAttribute('data-theme', theme);
      }
      
      // Toggle theme function
      function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        // Update toggle button state
        const toggleBtn = document.querySelector('[data-theme-toggle]');
        if (toggleBtn) {
          toggleBtn.setAttribute('aria-pressed', newTheme === 'dark' ? 'true' : 'false');
        }
      }
      
      // Initialize theme immediately
      initTheme();
      
      // Make toggle function globally available
      window.toggleTheme = toggleTheme;
      
      // Update toggle button state after DOM loads
      document.addEventListener('DOMContentLoaded', () => {
        const toggleBtn = document.querySelector('[data-theme-toggle]');
        if (toggleBtn) {
          const currentTheme = document.documentElement.getAttribute('data-theme');
          toggleBtn.setAttribute('aria-pressed', currentTheme === 'dark' ? 'true' : 'false');
        }
      });
    </script>
    
    <!-- Intersection Observer for fade-in animations -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -100px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-slide-up');
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);
        
        // Observe all elements with reveal class
        document.querySelectorAll('.reveal').forEach((el) => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  
  /* Custom focus styles for better accessibility */
  .focus-visible {
    @apply outline-none ring-2 ring-primary-500 ring-offset-2 ring-offset-white dark:ring-offset-gray-900;
  }
  
  /* Screen reader only utility class */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  .focus\:not-sr-only:focus {
    position: static;
    width: auto;
    height: auto;
    padding: inherit;
    margin: inherit;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
  
  /* Reveal animation initial state */
  .reveal {
    @apply opacity-0 translate-y-5;
  }
  
  /* Smooth transitions for theme switching */
  * {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>